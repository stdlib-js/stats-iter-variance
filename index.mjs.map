{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isIteratorLike from '@stdlib/assert-is-iterator-like';\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number';\nimport incrvariance from '@stdlib/stats-incr-variance';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Computes the unbiased sample variance over all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {number} [mean] - mean value\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a number\n* @returns {(number|null)} unbiased sample variance\n*\n* @example\n* import runif from '@stdlib/random-iter-uniform';\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s2 = itervariance( rand );\n* // returns <number>\n*/\nfunction itervariance( iterator, mean ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( '0ff48', iterator ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( format( '0ff4N', mean ) );\n\t\t}\n\t\tacc = incrvariance( mean );\n\t} else {\n\t\tacc = incrvariance();\n\t}\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else {\n\t\t\tacc( NaN );\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nexport default itervariance;\n"],"names":["itervariance","iterator","mean","acc","v","isIteratorLike","TypeError","format","arguments","length","isNumber","incrvariance","next","done","value","NaN"],"mappings":";;sXAiDA,SAASA,EAAcC,EAAUC,GAChC,IAAIC,EACAC,EACJ,IAAMC,EAAgBJ,GACrB,MAAM,IAAIK,UAAWC,EAAQ,QAASN,IAEvC,GAAKO,UAAUC,OAAS,EAAI,CAC3B,IAAMC,EAAUR,GACf,MAAM,IAAII,UAAWC,EAAQ,QAASL,IAEvCC,EAAMQ,EAAcT,EACtB,MACEC,EAAMQ,IAEP,OACCP,EAAIH,EAASW,QACNC,MAGiB,iBAAZT,EAAEU,MACbX,EAAKC,EAAEU,OAEPX,EAAKY,KAGP,OAAOZ,GACR"}